{"version":3,"sources":["components/Tooltip.js","components/MapTest.js","components/Results.js","components/Sidebar.js","components/LoadingAnimation.js","components/Declaration.js","App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","geoTooltip","fontFamily","display","flexDirection","transition","tooltipName","fontSize","fontWeight","tooltipPolls","color","paddingBottom","tooltipWinner","backgroundColor","props","padding","Tooltip","classes","className","results","name","pollsReported","pollsTotal","style","id","partyCode","winner","runnerup","votes","toLocaleString","e","getWinningBy","mapContainer","flex","resetButton","boxShadow","height","width","alignItems","justifyContent","borderRadius","background","cursor","defaultStyle","weight","fillOpacity","selectedStyle","MapTest","useState","initBounds","setInitBounds","currentBounds","setCurrentBounds","geo","setgeo","mapRef","useRef","geoRef","useEffect","console","log","current","axios","get","province","then","res","status","data","bounds","L","geoJSON","getBounds","leafletElement","fitBounds","catch","err","selectedRiding","zoomToED","eachLayer","layer","feature","properties","Name","toUpperCase","setStyle","resetBounds","getTooltipData","getPartyResults","EDName","find","ed","getFillByResults","parties","length","fill","party","nameShort","ridingName","map","findLayer","tooltipclose","handleSelectRiding","featureData","featureColor","_tooltip","_content","includes","newTooltip","ReactDOMServer","renderToString","setTooltipContent","sticky","direction","bindTooltip","Map","ref","zoomSnap","zoomDelta","minZoom","TileLayer","attribution","url","GeoJSON","partyResults","fillColor","onClick","layerBounds","closeTooltip","clickedRiding","onEachFeature","onMouseOver","onMouseOut","position","resultsRoot","candidateRoot","resultsInfo","imageDiv","screensize","marginBottom","minWidth","overflow","bottom","textAlign","candidateLeftDiv","candidateName","candidateRightDiv","justifySelf","votesDiv","Candidate","candidate","prevCandidate","setCandidate","imgRef","setTimeout","split","pop","alt","onLoad","target","onError","src","prov","cachedHeadFilename","firstName","lastName","isIncumbent","percent","isElected","paddingRight","Results","i","partyColor","findParty","getPartyColor","key","sidebar","title","top","minHeight","paddingLeft","content","overflowX","overflowY","LocationButton","Sidebar","arrow","toggleArrow","menu","setMenu","setResults","onMouseEnter","resultId","onMouseLeave","resultData","children","CSSTransition","in","timeout","unmountOnExit","classNames","sort","a","b","result","small","LoadingAnimation","useStyles","root","alignSelf","Declaration","declarationText","app","left","App","setData","loading","toggleLoading","setParties","selectedResults","setSelectedResults","timer","window","innerWidth","setDeclarationText","declaration","setDeclaration","declaredColor","setDeclaredColor","setProv","replace","RegExp","exec","location","search","decodeURIComponent","getQueryString","getData","startTimer","getResultsFromURL","setInterval","updateResults","overallResult","partyName","resultText","text","partyWinner","hash","decodeURI","riding","toLowerCase","initResults","newResults","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.43dc02d2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nconst styles = makeStyles({\r\n    geoTooltip: {\r\n        fontFamily: 'Roboto, Ubuntu, Helvetica',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        transition: '1s'\r\n    },\r\n    tooltipName: {\r\n        fontSize: 20,\r\n\r\n        fontWeight: 'bolder',\r\n    },\r\n    tooltipPolls: {\r\n        fontSize: 14,\r\n        color: 'grey',\r\n        paddingBottom: 10\r\n    },\r\n    tooltipWinner:{\r\n        backgroundColor: props=>props.color,\r\n        color: props=>props.color === '#C0C0C0'? 'black' : 'white',\r\n        padding: 5, \r\n        '& #tooltipPartyCode': {\r\n            fontSize: 18\r\n        },\r\n        '& #tooltipWinnerName': {\r\n            fontSize: 20,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #tooltipWinningBy' : {\r\n\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst Tooltip = (props) => {\r\n\r\n    const classes = styles(props)\r\n\r\n    const getWinningBy = () => {\r\n        try {\r\n            let winner = props.results.results[0]\r\n            let runnerup = props.results.results[1]\r\n            if (winner.votes > runnerup.votes) {\r\n                return `Leading by ${(winner.votes - runnerup.votes).toLocaleString('en')} votes`\r\n            }\r\n        } catch (e) {\r\n            // return ''\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.geoTooltip}>\r\n            <div className={classes.tooltipName}>{props.results.name}</div>\r\n            <div className={classes.tooltipPolls}>{props.results.pollsReported}/{props.results.pollsTotal} polls reported</div>\r\n            {props.results.pollsReported > 0 && \r\n            <div className={classes.tooltipWinner} style={{backgroundColor: props.color}}>\r\n                <div id=\"tooltipPartycode\">{props.results.results[0].partyCode}</div>\r\n                <div id=\"tooltipWinnerName\">{props.results.results[0].name}</div>\r\n                <div id=\"tooltipWinningBy\">{getWinningBy()}</div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tooltip","import React, { useState, useEffect, useRef } from 'react'\r\nimport ReactDOMServer from 'react-dom/server'\r\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\r\nimport Control from 'react-leaflet-control'\r\nimport L from 'leaflet'\r\n\r\nimport ZoomOutMapIcon from '@material-ui/icons/ZoomOutMap';\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport Tooltip from './Tooltip'\r\nimport axios from 'axios'\r\n\r\nconst styles= makeStyles({\r\n    mapContainer: {\r\n        flex:1\r\n    },\r\n    resetButton: {\r\n        display: 'flex',\r\n        boxShadow: '0 1px 4px rgba(0,0,0,0.65)',\r\n        height: 26,\r\n        width: 26,\r\n        fontSize: 14,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderRadius: '4px',\r\n        background: '#FFFFFF',\r\n        cursor: 'pointer',\r\n        color: 'black'\r\n        \r\n    }\r\n})\r\n\r\nconst defaultStyle={\r\n    weight: 0.9,\r\n    // color: 'black',\r\n    fillOpacity: 0.9\r\n}\r\n\r\nconst selectedStyle={\r\n    weight: 3,\r\n    fillOpacity: 1\r\n}\r\n\r\n\r\n const MapTest = (props) => {\r\n    // const [position, setPosition] = useState({lat: 54, lng: -105, zoom: 5});\r\n    const [initBounds, setInitBounds] = useState();\r\n    const [currentBounds, setCurrentBounds] = useState();\r\n    const [geo, setgeo] = useState(null);\r\n    // const [selectedRiding, setSelectedRiding] = useState(null)\r\n    const mapRef = useRef(null);\r\n    const geoRef = useRef(null)\r\n\r\n    const classes = styles();\r\n\r\n    useEffect(()=> {\r\n        console.log('render map')\r\n        if(!mapRef.current) {\r\n            console.log('no mapReff')\r\n            return\r\n        } else {\r\n            axios.get(`/${props.province}/geojson`)\r\n                .then(res=>{\r\n                    if (res.status === 200) {\r\n                        setgeo(res.data)\r\n                        var bounds = L.geoJSON(res.data).getBounds()\r\n                        setInitBounds(bounds)\r\n                        var map = mapRef.current.leafletElement\r\n                        map.fitBounds(bounds)\r\n                    }\r\n                })\r\n                .catch(err=>{\r\n                    console.log(err);\r\n                    console.log('error getting geojson data')\r\n                })\r\n        }   \r\n    }, [])\r\n\r\n    useEffect(()=> {\r\n        if (props.selectedRiding) {\r\n            zoomToED(props.selectedRiding.name)\r\n            if (geoRef.current) {\r\n                const geo = geoRef.current.leafletElement;\r\n\r\n                geo.eachLayer(layer=>{\r\n                    if (layer.feature.properties.Name.toUpperCase() === props.selectedRiding.name.toUpperCase()) {\r\n                        layer.setStyle(selectedStyle)\r\n                    }\r\n                })\r\n            }\r\n            \r\n        } else {\r\n            resetBounds()\r\n        }\r\n    }, [geoRef.current, props.selectedRiding])\r\n\r\n    useEffect(()=> {\r\n        if (geoRef.current) {\r\n            geoRef.current.leafletElement.eachLayer(layer=>{\r\n                getTooltipData(layer.feature, layer)\r\n            });\r\n        }\r\n    }, [props.data])\r\n\r\n    const getPartyResults = (EDName) => {\r\n        try {\r\n            if (props.data) {\r\n                let partyResults = props.data.data.find(ed=>\r\n                    ed.name.toUpperCase() === EDName.toUpperCase()\r\n                )\r\n                return partyResults\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Couldn't get party results\")\r\n        }\r\n    }\r\n    \r\n    const getFillByResults = (results) =>{\r\n        try {\r\n            if(props.parties && results.results.length > 0) {\r\n                if (results.results[0].votes > 0) {\r\n                if (results.results[0].partyCode === 'NDP') {\r\n                    return 'rgb(221, 102, 0)'\r\n                }\r\n                let fill = props.parties.find(party=>{\r\n                    return party.nameShort === results.results[0].partyCode\r\n                })\r\n                if (fill) {\r\n                    return fill.color\r\n                } else {\r\n                    return 'rgb(192, 192, 192)'\r\n                }\r\n            } else {\r\n                return 'rgb(89, 91, 91)'\r\n            }\r\n        }\r\n        } catch(err) {\r\n            console.log(\"Error getting Geo Fill for \", results.name)\r\n            return 'rgb(89, 91, 91)'\r\n        } \r\n    }\r\n\r\n\r\n    const handleFill = (feature) => {\r\n        if (feature) {\r\n            let partyResults = getPartyResults(feature.properties.Name);\r\n            let fill = 'rgb(89, 91, 91)'\r\n            if (partyResults) {\r\n                fill = getFillByResults(partyResults)\r\n                if (props.selectedRiding) {\r\n                    if (props.selectedRiding.name === feature.properties.Name) {\r\n                        return {\r\n                            fillColor: fill,\r\n                            weight: 3,\r\n                            color: 'black',\r\n                            fillOpacity: 1\r\n                        }\r\n                    }\r\n                } \r\n                return {\r\n                    fillColor: fill,\r\n                    weight: 0.9,\r\n                    color: 'black',\r\n                    fillOpacity: 0.9\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        try {\r\n            var layerBounds = e.layer.getBounds();\r\n            if (currentBounds === layerBounds) {\r\n                e.layer.closeTooltip()\r\n            } \r\n            const map = mapRef.current.leafletElement;\r\n            setCurrentBounds(layerBounds)\r\n            map.fitBounds(layerBounds)\r\n            const clickedRiding = e.layer.feature.properties.Name\r\n            const partyResults = getPartyResults(clickedRiding)\r\n            props.handleSelectRiding(partyResults)\r\n            // setSelectedRiding(e.layer.feature.properties.Name)\r\n            e.layer.setStyle(selectedStyle)\r\n        } catch(e) {\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    const zoomToED = (ridingName) => {\r\n        try {\r\n\r\n            if (geoRef.current) {\r\n\r\n                const map = mapRef.current.leafletElement;\r\n                const geo = geoRef.current.leafletElement;\r\n                var findLayer = null;\r\n                geo.eachLayer(layer=>{\r\n                    if (layer.feature.properties.Name.toUpperCase() === ridingName.toUpperCase()) {\r\n                        findLayer = layer\r\n                    }\r\n                })\r\n                map.fitBounds(findLayer.getBounds())\r\n            }    \r\n        } catch (err) {\r\n            console.log('error zooming on riding')\r\n        }\r\n    }\r\n\r\n    const resetBounds = () => {\r\n        try {\r\n            const map = mapRef.current.leafletElement;\r\n            map.fitBounds(initBounds)    \r\n            map.tooltipclose();\r\n\r\n            props.handleSelectRiding(null)\r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n\r\n    function highlightFeature(e) {\r\n        e.layer.setStyle(selectedStyle)\r\n    }\r\n\r\n    function resetFeature(e) {\r\n        if (props.selectedRiding) {\r\n            let layerName = e.layer.feature.properties.Name\r\n            if (layerName.toUpperCase() !== props.selectedRiding.name.toUpperCase()) {\r\n                e.layer.setStyle(defaultStyle)\r\n            } \r\n        } else {\r\n            e.layer.setStyle(defaultStyle)\r\n        }\r\n    }\r\n\r\n    const getTooltipData = (feature, layer) => {\r\n        if (feature.properties ) {\r\n            try {\r\n                const featureData = getPartyResults(feature.properties.Name)\r\n                const featureColor = getFillByResults(featureData)\r\n                if (featureData && featureColor) {\r\n                    if (!layer._tooltip) {\r\n                        layer.bindTooltip(ReactDOMServer.renderToString(<Tooltip results={featureData} color={featureColor} />), {sticky: false, direction: 'top'})\r\n                    } else if (!layer._tooltip._content.includes(featureColor)) {\r\n                        let newTooltip = ReactDOMServer.renderToString(<Tooltip results={featureData} color={featureColor} />)\r\n                        layer.setTooltipContent(newTooltip, {sticky: false, direction: 'top'})\r\n                    }\r\n                }\r\n            } catch(e) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mapContainer}>\r\n            <Map \r\n                ref={mapRef} \r\n                zoomSnap={0.25}\r\n                zoomDelta={0.5}\r\n                minZoom={3}    \r\n            >\r\n                <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {geo && \r\n                <GeoJSON \r\n                    ref={geoRef} \r\n                    style={handleFill} \r\n                    data={geo} \r\n                    onClick={handleClick} \r\n                    onEachFeature={getTooltipData}\r\n                    onMouseOver={highlightFeature}\r\n                    onMouseOut={resetFeature}\r\n                />  \r\n                }   \r\n                <Control position=\"topleft\">\r\n                    <a id=\"zoomOut\" style={{color: 'black !important'}} className={`leaflet-control-zoom leaflet-bar ${classes.resetButton}`} onClick={resetBounds}>\r\n                        <ZoomOutMapIcon />\r\n                    </a>\r\n                </Control>\r\n            </Map>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default MapTest;","import React, {useEffect, useRef, useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst styles = makeStyles(props=>({\r\n    resultsRoot: {\r\n        padding: 10,\r\n      \r\n    },\r\n    candidateRoot: {\r\n        position: 'relative',\r\n        display: 'flex', \r\n        flexDirection: 'row',\r\n        height: 120,\r\n        padding: '10px 0'\r\n    },\r\n    resultsInfo: {\r\n        display: 'flex', \r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        '& #pollsReported': {\r\n            fontSize: 12,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #totalVotes': {\r\n            fontSize: 10,\r\n            color: 'darkslategrey'\r\n        }\r\n    },\r\n    imageDiv: {\r\n        height: props=>props.screensize < 700 ? 100 : 120,\r\n        position: 'relative',\r\n        marginBottom: 25,\r\n        minWidth: 50,\r\n        width: props=>props.screensize < 700 ? 50 : 70,\r\n        borderRadius: '8px',\r\n        overflow: 'hidden',\r\n        '& #partyCode': {\r\n            position: 'absolute', \r\n            bottom: 8,\r\n            color: 'white',\r\n            width: '100%',\r\n            textAlign: 'center'\r\n        },\r\n        '& img': {\r\n            width: '100%',\r\n            transition: 'width 500ms'\r\n        }\r\n    },\r\n    candidateLeftDiv: {\r\n        flex: 3, \r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        padding: '10px 0 10px 10px',\r\n\r\n        '& #candidateIncumbent': {\r\n            fontSize: 13,\r\n            fontWeight: 'lighter'\r\n        }\r\n    },\r\n    candidateName: {\r\n        '& #candidateFirst': {\r\n            fontWeight: 'bolder',\r\n            fontSize: props=>props.screensize < 700 ? 12 : 14,\r\n\r\n        },\r\n        '& #candidateLast': {\r\n            fontWeight: 'bolder',\r\n            fontSize: props=>props.screensize < 700 ? 16 : 22,\r\n        }\r\n    }, \r\n    candidateRightDiv: {\r\n        flex: 2, \r\n        justifySelf: 'flex-end',\r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        padding: '10px 0',\r\n        justifyContent: 'space-between',\r\n        '& #candidateElected': {\r\n            display: 'flex', \r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            fontSize: props=>props.screensize < 700 ? 12 : 14,\r\n        }\r\n    },\r\n    votesDiv: {\r\n        textAlign: 'right',\r\n        '& #votesPercent': {\r\n            fontSize: props=>props.screensize < 700 ? 16 : 22,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #votesTotal': {\r\n            fontSize: props=>props.screensize < 700 ? 12 : 14,\r\n            fontWeight: 'lighter'\r\n        }\r\n    }\r\n}))\r\n\r\nconst Candidate = (props) => {\r\n    const {candidate} = props\r\n    const [prevCandidate, setCandidate] = useState('')\r\n    const imgRef = useRef(null)\r\n\r\n    useEffect(()=> {\r\n        setCandidate(candidate.name)\r\n        if (candidate) {\r\n\r\n            if (prevCandidate === imgRef.current.name) {\r\n                imgRef.current.style.width = '100%'\r\n            } else {\r\n                imgRef.current.style.width = 0\r\n                setTimeout(()=>{\r\n                    imgRef.current.style.width = '100%'\r\n                }, 1000)\r\n\r\n            }\r\n        }\r\n    }, [candidate])\r\n    \r\n    const classes = styles(props);\r\n    var candidateName = candidate.name.split(' ')\r\n    var lastName = candidateName.pop();\r\n    \r\n    return (\r\n        <div className={classes.candidateRoot}>\r\n            <div style={{backgroundColor: props.color}} className={classes.imageDiv}>\r\n                <img ref={imgRef} alt=\"Candidate Headshot\" name={candidate.name} onLoad={e=>e.target.style.width = \"100%\"} onError={(e) => { e.target.onError = null; e.target.src =`/img/no_headshot.png`}} src={`/image/${props.prov}/${candidate.cachedHeadFilename}`}/>\r\n                <div id=\"partyCode\" style={{fontWeight: 'bolder',color: props.color === '#C0C0C0' ? 'black' : 'white' }}>{candidate.partyCode}</div>\r\n            </div>\r\n            <div className={classes.candidateLeftDiv}>\r\n                <div className={classes.candidateName}>\r\n                    <div id=\"candidateFirst\">{candidate.firstName}</div>\r\n                    <div id=\"candidateLast\" >{candidate.lastName}</div>\r\n                </div>\r\n                <div id=\"candidateIncumbent\">{candidate.isIncumbent && 'Incumbent'}</div>\r\n            </div>\r\n            <div className={classes.candidateRightDiv}>\r\n                <div className={classes.votesDiv}>\r\n                    <div id='votesPercent'>{candidate.percent}%</div>\r\n                    <div id='votesTotal'>{candidate.votes.toLocaleString('en')} total votes</div>\r\n                </div>\r\n                {candidate.isElected ? <div id=\"candidateElected\">\r\n                    <CheckCircleIcon style={{paddingRight: 5, fontSize: 14, color: 'green'}} /> Elected\r\n                </div>\r\n                :\r\n                <div style={{fontSize: 14}}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Results = (props) => {\r\n    \r\n    const classes = styles();\r\n    const {data} = props;\r\n\r\n    useEffect(() => {\r\n        console.log('results render')\r\n    }, [props.data])\r\n\r\n    const getPartyColor = (candidate) => {\r\n        // console.log(candidate)\r\n        let color = '#C0C0C0' \r\n        if (candidate.partyCode === \"NDP\") {\r\n            return 'rgb(221, 102, 0)'\r\n        }\r\n        if (props.parties) {\r\n            let findParty = props.parties.find(party=>party.nameShort === candidate.partyCode)\r\n            if (findParty) {\r\n                color = findParty.color\r\n            }\r\n        }\r\n        return color\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.resultsRoot}>\r\n            {props.data && \r\n        <>\r\n            <div className={classes.resultsInfo}>\r\n                <div id=\"pollsReported\">{data.pollsReported}/{data.pollsTotal} polls reported</div>\r\n                <div id=\"totalVotes\">{data.votes.toLocaleString('en')} total votes</div>\r\n            </div>\r\n                <div>\r\n                    {props.data.results.map((candidate, i)=> {\r\n                        let partyColor = getPartyColor(candidate);\r\n                        return <Candidate prov={props.prov} screensize={props.screensize} key={i} color={partyColor} candidate={candidate}/>\r\n                    })}\r\n                </div>    \r\n            </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results","import React, {useState, useEffect} from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\nimport Results from './Results'\r\n\r\nconst styles = makeStyles({\r\n    sidebar: {\r\n        flex: 2, \r\n        minWidth: 260,\r\n        position: 'relative',\r\n        display: 'flex',\r\n        overflow: 'hidden'\r\n    },\r\n    title: {\r\n        width: '100%',\r\n        top: 0,\r\n        backgroundColor: 'darkgrey',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        minHeight: 50,\r\n        paddingLeft: 10,\r\n        fontWeight: 'bolder',\r\n    },\r\n    content: {\r\n        marginBottom: 10,\r\n        height: 'calc(100% - 50px)',\r\n        overflowX: 'hidden',\r\n        overflowY: 'scroll'\r\n\r\n    },\r\n    LocationButton: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        minHeight: 50,\r\n        paddingLeft: 10,\r\n        justifyContent: 'space-between',\r\n        '&:hover': {\r\n            backgroundColor: 'lightgrey',\r\n            cursor: 'pointer'\r\n        }\r\n    }\r\n})\r\n\r\nconst Sidebar = (props) =>  {\r\n    const [arrow, toggleArrow] = useState(0)\r\n    const classes=styles();\r\n    const [menu, setMenu] = useState('location')\r\n    const [results, setResults] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        if (props.results) {\r\n            setResults(props.results)\r\n            setMenu('results')\r\n        } else {\r\n            setResults(null)\r\n            setMenu('location')\r\n        }\r\n    },[props.results, props.data])\r\n\r\n\r\n    const handleSelectRiding = (results) => {\r\n        props.handleSelectRiding(results);\r\n        setResults(results); \r\n        setMenu('results')\r\n    }   \r\n\r\n    const LocationButton = (props) => {\r\n        return (\r\n            <div\r\n                className={`${classes.LocationButton} menu-item`}\r\n                onMouseEnter={()=>toggleArrow(props.resultId)}\r\n                onMouseLeave={()=>toggleArrow(0)}\r\n                onClick={()=>handleSelectRiding(props.resultData)}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const handleBack = () => {\r\n        setMenu('location')\r\n        props.handleSelectRiding(null)\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"widgetSidebar\" className={classes.sidebar}>\r\n            <div style={{position: 'absolute', top: 0, height: '50px', width: '100%', backgroundColor: 'darkgrey'}}/>\r\n            <CSSTransition \r\n                in={menu===\"location\"} \r\n                timeout={500}\r\n                unmountOnExit\r\n                classNames=\"menu-primary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        SELECT A RIDING\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                    {\r\n                        props.data && props.data.data.sort((a,b)=>{\r\n                            if (a.name > b.name) {\r\n                                return 1\r\n                            } else return -1\r\n                        })\r\n                        .map((result)=> {\r\n                            return (\r\n                                <LocationButton key={result.id} resultId={result.id} resultData={result} >{result.name}{arrow === result.id && <ChevronRightIcon/>}</LocationButton>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                </div>\r\n            </CSSTransition>\r\n            <CSSTransition \r\n                in={menu===\"results\"} \r\n                unmountOnExit\r\n                timeout={500}\r\n                classNames=\"menu-secondary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        <ChevronLeftIcon onClick={handleBack} style={{cursor: 'pointer'}}/><div style={{paddingRight: '15px'}}>{results && results.name.toUpperCase()}</div>\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                        {props.data && menu === 'results' && \r\n                            <Results \r\n                                prov={props.prov}\r\n                                screensize={props.small}\r\n                                data={results}\r\n                                parties={props.parties}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import React from 'react'\r\n\r\nconst LoadingAnimation = () => {\r\n    return (\r\n        <div className=\"spinnerDiv\">\r\n            <div className=\"spinnerText\">Loading Map..</div>\r\n            <div className=\"spinner\">\r\n                <div className=\"double-bounce1\"></div>\r\n                <div className=\"double-bounce2\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LoadingAnimation","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: props=>props.color,\r\n        color: 'white', \r\n        fontSize: 18,\r\n        fontWeight: 'bold',\r\n        padding: 5,\r\n        justifyContent: \"center\",\r\n        display: 'flex', \r\n        alignSelf: 'center',\r\n        width: '100%',\r\n        '& svg': {\r\n            paddingRight: 5\r\n        }\r\n    }\r\n})\r\n\r\nconst Declaration = (props) => {\r\n    const classes = useStyles(props)\r\n    return <div className={classes.root}>\r\n        <CheckCircleIcon />\r\n        {props.declarationText}\r\n    </div>\r\n}\r\n\r\nexport default Declaration\r\n\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {makeStyles} from '@material-ui/core'\nimport axios from 'axios'\n\n\n// import { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nimport MapDiv from './components/MapTest'\nimport Sidebar from './components/Sidebar.js'\nimport LoadingAnimation from './components/LoadingAnimation'\nimport Declaration from './components/Declaration'\n\nconst styles = makeStyles({\n  app: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n    \n  }, \n  left: {\n    flex: 4,\n    position: 'relative',\n    display: 'flex',\n    flexDirection: \"column\"\n  }\n})\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n  const [loading, toggleLoading] = useState(true)\n  const [parties, setParties] = useState(null)\n  const [selectedResults, setSelectedResults] = useState(null)\n  const [timer, setTimer] = useState(10000)\n  const [screensize, setScreenSize] = useState(window.innerWidth)\n  const [declarationText, setDeclarationText] = useState('')\n\tconst [declaration, setDeclaration] = useState(null)\n  const [declaredColor, setDeclaredColor] = useState('')\n  const [prov, setProv] = useState('')\n\n  const classes = styles();\n\n\n  function getQueryString(name) {\n    name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n        results = regex.exec(window.location.search);\n    return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n  }\n\n  useEffect(()=>{\n    let province = 'nb'\n\n    var url = getQueryString('prov')\n    console.log('url', url)\n    if (url) {\n      province = url\n    }\n    setProv(province)\n    console.log('app,', province)\n\n    if (province) {\n      getData(province)\n      startTimer(province)\n    }\n    console.log(`Updating every ${timer/1000} seconds`)\n  },[])\n\n  useEffect(()=> {\n    getResultsFromURL()\n  }, [loading])\n\n  const startTimer = (province) => {\n      setInterval(()=>{\n          getData(province);\n      }, timer);\n    }\n\n  useEffect(()=> {\n    updateResults()\n  }, [data])\n\n  useEffect(()=>{\n\t\ttry {\n\t\t\tif (data && declaration) {\n\t\t\t\tif (declaration.overallResult.partyName && declaration.overallResult.resultText) {\n\t\t\t\t\tlet text = declaration.overallResult.partyName + ' ' + declaration.overallResult.resultText;\n          setDeclarationText(text)\n          let partyWinner = parties.find(party=>party.name === declaration.overallResult.partyName)\n          setDeclaredColor(partyWinner.color)     \n\t\t\t\t} else \n        setDeclarationText('')\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t\n\t\t}\n\n    },[data, parties, declaration])\n\n  const getData = (province) => {\n    console.log('fetching data')\n    axios.get(`/${province}/fullresults`)\n      .then(res=>{\n        if (res.status === 200) {\n          setData(res.data);\n          toggleLoading(false);\n        }\n      })\n      .catch(err=>console.log(\"Error fetching FULLELECTIONDATA, check your env variables and try again\", err))\n    \n    axios.get(`/${province}/overallresults`)\n      .then(res=>{\n        if (res.status === 200) {\n          setParties(res.data.partyResults)\n        }\n      })\n      .catch(err=>console.log(\"Error fetching OVERALLRESULTS, check your env variables and try again\"))\n    axios.get(`/${province}/declaration`)\n      .then(function (res) {\n        if (res.status === 200) {\n          setDeclaration(res.data)\n        } \n      })\n      .catch(err=>{\n        console.log(\"Error fetching results\")\n      })\n  }\n\n  const getResultsFromURL = () => {\n    try {\n      let hash = window.location.hash\n      if (hash) {\n        hash = decodeURI(hash.replace('#', ''))\n        let name = hash\n        if (data) {\n          const result = data.data.find(riding=>{\n            return riding.name.toLowerCase() === name.toLowerCase() \n          })\n          if (result) {\n            setSelectedResults(result)\n          }\n        }\n      }\n  \n    } catch (err) {\n      console.log('could not find riding by hash')\n    }\n\n  }\n\n  const updateResults = () => {\n    if (selectedResults) {\n      console.log('updating selected', selectedResults)\n\n      let initResults = selectedResults.name;\n      let newResults = data.data.find(riding=> riding.name === initResults)\n      if (initResults === newResults.name) {\n        setSelectedResults(newResults)\n      }\n    }\n  }\n\n  const handleSelectRiding = (results) => {\n    setSelectedResults(results)\n  }\n\n  const getColorByName = () => {\n    let partyWinner = parties.find(party=>party.name === declaration.overallResult.partyName)\n    console.log('winner', partyWinner)\n    return 'red'\n  }\n\n  return (\n    <div id={'map-widget-app'} className={classes.app}>\n      <div className={classes.left}>\n        {declarationText && <Declaration color={declaredColor} declarationText={declarationText}/>}\n      {!loading  ? <MapDiv \n        data={data}\n        parties={parties}\n        province={prov}\n        handleSelectRiding={handleSelectRiding}\n        selectedRiding={selectedResults}\n        />\n        :\n        <LoadingAnimation/>\n      }\n      </div>\n        <Sidebar \n          data={data} \n          parties={parties}\n          results={selectedResults} \n          handleSelectRiding={handleSelectRiding}\n          small={screensize}\n          prov={prov}\n          />\n        {/* {!loading && <Pictureloader data={data}/>} */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}