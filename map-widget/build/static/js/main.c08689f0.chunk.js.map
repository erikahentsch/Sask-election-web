{"version":3,"sources":["components/Tooltip.js","components/MapTest.js","components/Results.js","components/Sidebar.js","components/LoadingAnimation.js","components/Declaration.js","App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","geoTooltip","fontFamily","display","flexDirection","transition","width","wordBreak","whiteSpace","tooltipName","fontSize","fontWeight","tooltipPolls","color","paddingBottom","tooltipWinner","backgroundColor","props","padding","Tooltip","classes","className","results","name","pollsReported","pollsTotal","style","id","partyCode","winner","runnerup","votes","toLocaleString","e","getWinningBy","mapContainer","flex","resetButton","boxShadow","height","alignItems","justifyContent","borderRadius","background","cursor","defaultStyle","weight","fillOpacity","selectedStyle","MapTest","useState","initBounds","setInitBounds","currentBounds","setCurrentBounds","geo","setgeo","mapRef","useRef","geoRef","useEffect","console","log","current","axios","get","province","then","res","status","data","bounds","L","geoJSON","getBounds","leafletElement","fitBounds","catch","err","selectedRiding","zoomToED","resetBounds","eachLayer","layer","getTooltipData","feature","getPartyResults","EDName","find","ed","toUpperCase","getFillByResults","parties","length","fill","party","nameShort","ridingName","map","findLayer","properties","Name","handleSelectRiding","options","pane","removeFrom","isMobile","some","toMatchItem","navigator","userAgent","match","small","window","screen","featureData","featureColor","_tooltip","_content","includes","newTooltip","ReactDOMServer","renderToString","setTooltipContent","sticky","direction","bindTooltip","offset","Map","ref","zoomSnap","zoomDelta","minZoom","TileLayer","attribution","url","GeoJSON","partyResults","fillColor","onClick","layerBounds","closeTooltip","clickedRiding","setStyle","onEachFeature","onMouseOver","onMouseOut","position","resultsRoot","candidateRoot","resultsInfo","imageDiv","screensize","marginBottom","minWidth","overflow","bottom","textAlign","candidateLeftDiv","candidateName","candidateRightDiv","justifySelf","votesDiv","Candidate","candidate","prevCandidate","setCandidate","imgRef","setTimeout","split","pop","alt","onLoad","target","onError","src","prov","cachedHeadFilename","firstName","lastName","isIncumbent","percent","isElected","paddingRight","Results","i","partyColor","findParty","getPartyColor","key","sidebar","title","top","minHeight","paddingLeft","content","overflowX","overflowY","LocationButton","Sidebar","arrow","toggleArrow","menu","setMenu","setResults","nodeRef","onMouseEnter","resultId","onMouseLeave","onTouchMove","onTouchEnd","resultData","children","CSSTransition","in","timeout","unmountOnExit","classNames","sort","a","b","result","LoadingAnimation","useStyles","root","alignSelf","Declaration","declarationText","app","left","App","setData","loading","toggleLoading","setParties","selectedResults","setSelectedResults","timer","innerWidth","setDeclarationText","declaration","setDeclaration","declaredColor","setDeclaredColor","setProv","replace","RegExp","exec","location","search","decodeURIComponent","getQueryString","getData","startTimer","getResultsFromURL","setInterval","updateResults","overallResult","partyName","resultText","text","partyWinner","hash","decodeURI","riding","toLowerCase","initResults","newResults","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c08689f0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nconst styles = makeStyles({\r\n    geoTooltip: {\r\n        fontFamily: 'Roboto, Ubuntu, Helvetica',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        transition: '1s', \r\n        width: 200,\r\n        wordBreak: 'break-word',\r\n        whiteSpace: 'pre-wrap',\r\n    },\r\n    tooltipName: {\r\n        fontSize: 20,\r\n        fontWeight: 'bolder',\r\n        \r\n    },\r\n    tooltipPolls: {\r\n        fontSize: 14,\r\n        color: 'grey',\r\n        paddingBottom: 10\r\n    },\r\n    tooltipWinner:{\r\n        backgroundColor: props=>props.color,\r\n        color: props=>props.color === '#C0C0C0'? 'black' : 'white',\r\n        padding: 5, \r\n        '& #tooltipPartyCode': {\r\n            fontSize: 18\r\n        },\r\n        '& #tooltipWinnerName': {\r\n            fontSize: 20,\r\n            fontWeight: 'bolder',\r\n            // whiteSpace: 'pre-wrap',\r\n\r\n        },\r\n        '& #tooltipWinningBy' : {\r\n\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst Tooltip = (props) => {\r\n\r\n    const classes = styles(props)\r\n\r\n    const getWinningBy = () => {\r\n        try {\r\n            let winner = props.results.results[0]\r\n            let runnerup = props.results.results[1]\r\n            if (winner.votes > runnerup.votes) {\r\n                return `Leading by ${(winner.votes - runnerup.votes).toLocaleString('en')} votes`\r\n            }\r\n        } catch (e) {\r\n            // return ''\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.geoTooltip}>\r\n            <div className={classes.tooltipName}>{props.results.name}</div>\r\n            <div className={classes.tooltipPolls}>{props.results.pollsReported}/{props.results.pollsTotal} polls reported</div>\r\n            {props.results.pollsReported > 0 && \r\n            <div className={classes.tooltipWinner} style={{backgroundColor: props.color}}>\r\n                <div id=\"tooltipPartycode\">{props.results.results[0].partyCode}</div>\r\n                <div id=\"tooltipWinnerName\">{props.results.results[0].name}</div>\r\n                <div id=\"tooltipWinningBy\">{getWinningBy()}</div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tooltip","import React, { useState, useEffect, useRef } from 'react'\r\nimport ReactDOMServer from 'react-dom/server'\r\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\r\nimport Control from 'react-leaflet-control'\r\nimport L from 'leaflet'\r\n\r\nimport ZoomOutMapIcon from '@material-ui/icons/ZoomOutMap';\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport Tooltip from './Tooltip'\r\nimport axios from 'axios'\r\n\r\nconst styles= makeStyles({\r\n    mapContainer: {\r\n        flex:1\r\n    },\r\n    resetButton: {\r\n        display: 'flex',\r\n        boxShadow: '0 1px 4px rgba(0,0,0,0.65)',\r\n        height: 26,\r\n        width: 26,\r\n        fontSize: 14,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderRadius: '4px',\r\n        background: '#FFFFFF',\r\n        cursor: 'pointer',\r\n        color: 'black'\r\n        \r\n    }\r\n})\r\n\r\nconst defaultStyle={\r\n    weight: 0.9,\r\n    // color: 'black',\r\n    fillOpacity: 0.9\r\n}\r\n\r\nconst selectedStyle={\r\n    weight: 3,\r\n    fillOpacity: 1\r\n}\r\n\r\n\r\n const MapTest = (props) => {\r\n    // const [position, setPosition] = useState({lat: 54, lng: -105, zoom: 5});\r\n    const [initBounds, setInitBounds] = useState();\r\n    const [currentBounds, setCurrentBounds] = useState();\r\n    const [geo, setgeo] = useState(null);\r\n    // const [selectedRiding, setSelectedRiding] = useState(null)\r\n    const mapRef = useRef(null);\r\n    const geoRef = useRef(null)\r\n\r\n    const classes = styles();\r\n\r\n    useEffect(()=> {\r\n        console.log('render map')\r\n        if(!mapRef.current) {\r\n            console.log('no mapReff')\r\n            return\r\n        } else {\r\n            axios.get(`/${props.province}/geojson`)\r\n                .then(res=>{\r\n                    if (res.status === 200) {\r\n                        setgeo(res.data)\r\n                        var bounds = L.geoJSON(res.data).getBounds()\r\n                        setInitBounds(bounds)\r\n                        var map = mapRef.current.leafletElement\r\n                        map.fitBounds(bounds)\r\n                    }\r\n                })\r\n                .catch(err=>{\r\n                    console.log(err);\r\n                    console.log('error getting geojson data')\r\n                })\r\n        }   \r\n    }, [])\r\n\r\n    useEffect(()=> {\r\n        if (props.selectedRiding) {\r\n            zoomToED(props.selectedRiding.name)\r\n            \r\n        } else {\r\n            resetBounds()\r\n\r\n        }\r\n        \r\n    }, [props.selectedRiding, geoRef.current])\r\n\r\n    useEffect(()=> {\r\n        if (geoRef.current) {\r\n            geoRef.current.leafletElement.eachLayer(layer=>{\r\n                getTooltipData(layer.feature, layer)\r\n            });\r\n        }\r\n    }, [props.data])\r\n\r\n    const getPartyResults = (EDName) => {\r\n        try {\r\n            if (props.data) {\r\n                let partyResults = props.data.data.find(ed=>\r\n                    ed.name.toUpperCase() === EDName.toUpperCase()\r\n                )\r\n                return partyResults\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Couldn't get party results\")\r\n        }\r\n    }\r\n    \r\n    const getFillByResults = (results) =>{\r\n        try {\r\n            if(props.parties && results.results.length > 0) {\r\n                if (results.results[0].votes > 0) {\r\n                if (results.results[0].partyCode === 'NDP') {\r\n                    return 'rgb(221, 102, 0)'\r\n                } else if (results.results[0].partyCode === 'PC') {\r\n                    return 'rgb(0, 51, 153)'\r\n                }\r\n\r\n                let fill = props.parties.find(party=>{\r\n                    return party.nameShort === results.results[0].partyCode\r\n                })\r\n                if (fill) {\r\n                    return fill.color\r\n                } else {\r\n                    return 'rgb(192, 192, 192)'\r\n                }\r\n            } else {\r\n                return 'rgb(89, 91, 91)'\r\n            }\r\n        }\r\n        } catch(err) {\r\n            console.log(\"Error getting Geo Fill for \", results.name)\r\n            return 'rgb(89, 91, 91)'\r\n        } \r\n    }\r\n\r\n\r\n    const handleFill = (feature) => {\r\n        if (feature) {\r\n            let partyResults = getPartyResults(feature.properties.Name);\r\n            let fill = 'rgb(89, 91, 91)'\r\n            if (partyResults) {\r\n                fill = getFillByResults(partyResults)\r\n                if (props.selectedRiding) {\r\n                    if (props.selectedRiding.name.toUpperCase() === feature.properties.Name.toUpperCase()) {\r\n                        return {\r\n                            fillColor: fill,\r\n                            weight: 3,\r\n                            color: 'black',\r\n                            fillOpacity: 1\r\n                        }\r\n                    }\r\n                } \r\n                return {\r\n                    fillColor: fill,\r\n                    weight: 0.9,\r\n                    color: 'black',\r\n                    fillOpacity: 0.9\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        try {\r\n            var layerBounds = e.layer.getBounds();\r\n            if (currentBounds === layerBounds) {\r\n                e.layer.closeTooltip();\r\n            } \r\n            const map = mapRef.current.leafletElement;\r\n            setCurrentBounds(layerBounds)\r\n            map.fitBounds(layerBounds)\r\n            const clickedRiding = e.layer.feature.properties.Name\r\n            const partyResults = getPartyResults(clickedRiding)\r\n            props.handleSelectRiding(partyResults)\r\n            // setSelectedRiding(e.layer.feature.properties.Name)\r\n            e.layer.setStyle(selectedStyle)\r\n        } catch(e) {\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    const zoomToED = (ridingName) => {\r\n        try {\r\n\r\n            if (geoRef.current) {\r\n\r\n                const map = mapRef.current.leafletElement;\r\n                const geo = geoRef.current.leafletElement;\r\n                var findLayer = null;\r\n                geo.eachLayer(layer=>{\r\n                    if (layer.feature.properties.Name.toUpperCase() === ridingName.toUpperCase()) {\r\n                        findLayer = layer\r\n                    }\r\n                })\r\n                map.fitBounds(findLayer.getBounds())\r\n            }    \r\n        } catch (err) {\r\n            console.log('error zooming on riding')\r\n        }\r\n    }\r\n\r\n    const resetBounds = () => {\r\n        try {\r\n            const map = mapRef.current.leafletElement;\r\n            props.handleSelectRiding(null)\r\n            map.fitBounds(initBounds)    \r\n            map.eachLayer(function(layer) {\r\n                if(layer.options.pane === \"tooltipPane\") layer.removeFrom(map);\r\n            });\r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n\r\n    function highlightFeature(e) {\r\n        e.layer.setStyle(selectedStyle)\r\n    }\r\n\r\n    function resetFeature(e) {\r\n        if (props.selectedRiding) {\r\n            let layerName = e.layer.feature.properties.Name\r\n            if (layerName.toUpperCase() !== props.selectedRiding.name.toUpperCase()) {\r\n                e.layer.setStyle(defaultStyle)\r\n            } \r\n        } else {\r\n            e.layer.setStyle(defaultStyle)\r\n        }\r\n    }\r\n    function detectMob() {\r\n        const toMatch = [\r\n            /Android/i,\r\n            /webOS/i,\r\n            /iPhone/i,\r\n            /iPad/i,\r\n            /iPod/i,\r\n            /BlackBerry/i,\r\n            /Windows Phone/i\r\n        ];\r\n    \r\n        return toMatch.some((toMatchItem) => {\r\n            return navigator.userAgent.match(toMatchItem);\r\n        });\r\n    }\r\n    const getTooltipData = (feature, layer) => {\r\n        if (feature.properties ) {\r\n            try {\r\n                const isMobile = detectMob()\r\n                const small = window.screen.width < 500\r\n                const featureData = getPartyResults(feature.properties.Name)\r\n                const featureColor = getFillByResults(featureData)\r\n                if (featureData && featureColor) {\r\n                    if (!layer._tooltip) {\r\n                        layer.bindTooltip(\r\n                            ReactDOMServer.renderToString(<Tooltip small={small} results={featureData} color={featureColor} />), \r\n                            {sticky: !isMobile, offset: isMobile ? [0, 50] : [0,0], direction: isMobile ? 'top': 'auto'})\r\n                    } else if (!layer._tooltip._content.includes(featureColor)) {\r\n                        let newTooltip = ReactDOMServer.renderToString(<Tooltip small={small} results={featureData} color={featureColor} />)\r\n                        layer.setTooltipContent(newTooltip, {sticky: false, direction: 'top'})\r\n                    }\r\n                }\r\n            } catch(e) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mapContainer}>\r\n            <Map \r\n                ref={mapRef} \r\n                zoomSnap={0.25}\r\n                zoomDelta={0.5}\r\n                minZoom={3}    \r\n            >\r\n                <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {geo && \r\n                <GeoJSON \r\n                    ref={geoRef} \r\n                    style={handleFill} \r\n                    data={geo} \r\n                    onClick={handleClick} \r\n                    onEachFeature={getTooltipData}\r\n                    onMouseOver={highlightFeature}\r\n                    onMouseOut={resetFeature}\r\n                />  \r\n                }   \r\n                <Control position=\"topleft\">\r\n                    <a id=\"zoomOut\" style={{color: 'black !important'}} className={`leaflet-control-zoom leaflet-bar ${classes.resetButton}`} onClick={resetBounds}>\r\n                        <ZoomOutMapIcon />\r\n                    </a>\r\n                </Control>\r\n            </Map>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default MapTest;","import React, {useEffect, useRef, useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst styles = makeStyles(props=>({\r\n    resultsRoot: {\r\n        padding: 10,\r\n      \r\n    },\r\n    candidateRoot: {\r\n        position: 'relative',\r\n        display: 'flex', \r\n        flexDirection: 'row',\r\n        height: 120,\r\n        padding: '10px 0'\r\n    },\r\n    resultsInfo: {\r\n        display: 'flex', \r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        '& #pollsReported': {\r\n            fontSize: 12,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #totalVotes': {\r\n            fontSize: 10,\r\n            color: 'darkslategrey'\r\n        }\r\n    },\r\n    imageDiv: {\r\n        height: props=>props.screensize < 700 ? 100 : 120,\r\n        position: 'relative',\r\n        marginBottom: 25,\r\n        minWidth: 50,\r\n        width: props=>props.screensize < 700 ? 50 : 70,\r\n        borderRadius: '8px',\r\n        overflow: 'hidden',\r\n        '& #partyCode': {\r\n            position: 'absolute', \r\n            bottom: 8,\r\n            color: 'white',\r\n            width: '100%',\r\n            textAlign: 'center'\r\n        },\r\n        '& img': {\r\n            width: '100%',\r\n            transition: 'width 500ms'\r\n        }\r\n    },\r\n    candidateLeftDiv: {\r\n        flex: 3, \r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        padding: '10px 0 10px 10px',\r\n\r\n        '& #candidateIncumbent': {\r\n            fontSize: 13,\r\n            fontWeight: 'lighter'\r\n        }\r\n    },\r\n    candidateName: {\r\n        '& #candidateFirst': {\r\n            fontWeight: 'bolder',\r\n            fontSize: props=>props.screensize < 700 ? 12 : 14,\r\n\r\n        },\r\n        '& #candidateLast': {\r\n            fontWeight: 'bolder',\r\n            fontSize: props=>props.screensize < 700 ? 16 : 22,\r\n        }\r\n    }, \r\n    candidateRightDiv: {\r\n        flex: 2, \r\n        justifySelf: 'flex-end',\r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        padding: '10px 0',\r\n        justifyContent: 'space-between',\r\n        '& #candidateElected': {\r\n            display: 'flex', \r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            fontSize: props=>props.screensize < 700 ? 12 : 14,\r\n        }\r\n    },\r\n    votesDiv: {\r\n        textAlign: 'right',\r\n        '& #votesPercent': {\r\n            fontSize: props=>props.screensize < 700 ? 16 : 22,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #votesTotal': {\r\n            fontSize: props=>props.screensize < 700 ? 12 : 14,\r\n            fontWeight: 'lighter'\r\n        }\r\n    }\r\n}))\r\n\r\nconst Candidate = (props) => {\r\n    const {candidate} = props\r\n    const [prevCandidate, setCandidate] = useState('')\r\n    const imgRef = useRef(null)\r\n\r\n    useEffect(()=> {\r\n        setCandidate(candidate.name)\r\n        try {\r\n\r\n            if (prevCandidate === imgRef.current.name) {\r\n                imgRef.current.style.width = '100%'\r\n            } else {\r\n                imgRef.current.style.width = 0\r\n                setTimeout(()=>{\r\n                    imgRef.current.style.width = '100%'\r\n                }, 1000)\r\n\r\n            }\r\n        } catch (e) {\r\n            console.log('error resetting candidate image')\r\n        }\r\n    }, [candidate])\r\n    \r\n    const classes = styles(props);\r\n    var candidateName = candidate.name.split(' ')\r\n    var lastName = candidateName.pop();\r\n    \r\n    return (\r\n        <div className={classes.candidateRoot}>\r\n            <div style={{backgroundColor: props.color}} className={classes.imageDiv}>\r\n                <img ref={imgRef} alt=\"Candidate Headshot\" name={candidate.name} onLoad={e=>e.target.style.width = \"100%\"} onError={(e) => { e.target.onError = null; e.target.src =`/img/no_headshot.png`}} src={`/image/${props.prov}/${candidate.cachedHeadFilename}`}/>\r\n                <div id=\"partyCode\" style={{fontWeight: 'bolder',color: props.color === '#C0C0C0' ? 'black' : 'white' }}>{candidate.partyCode}</div>\r\n            </div>\r\n            <div className={classes.candidateLeftDiv}>\r\n                <div className={classes.candidateName}>\r\n                    <div id=\"candidateFirst\">{candidate.firstName}</div>\r\n                    <div id=\"candidateLast\" >{candidate.lastName}</div>\r\n                </div>\r\n                <div id=\"candidateIncumbent\">{candidate.isIncumbent && 'Incumbent'}</div>\r\n            </div>\r\n            <div className={classes.candidateRightDiv}>\r\n                <div className={classes.votesDiv}>\r\n                    <div id='votesPercent'>{candidate.percent}%</div>\r\n                    <div id='votesTotal'>{candidate.votes.toLocaleString('en')} total votes</div>\r\n                </div>\r\n                {candidate.isElected ? <div id=\"candidateElected\">\r\n                    <CheckCircleIcon style={{paddingRight: 5, fontSize: 14, color: 'green'}} /> Elected\r\n                </div>\r\n                :\r\n                <div style={{fontSize: 14}}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Results = (props) => {\r\n    \r\n    const classes = styles();\r\n    const {data} = props;\r\n\r\n    const getPartyColor = (candidate) => {\r\n        let color = '#C0C0C0' \r\n        if (candidate.partyCode === \"NDP\") {\r\n            return 'rgb(221, 102, 0)'\r\n        }  else if (candidate.partyCode === 'PC') {\r\n            return 'rgb(0, 51, 153)'\r\n        }\r\n        if (props.parties) {\r\n            let findParty = props.parties.find(party=>party.nameShort === candidate.partyCode)\r\n            if (findParty) {\r\n                color = findParty.color\r\n            }\r\n        }\r\n        return color\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.resultsRoot}>\r\n            {props.data && \r\n        <>\r\n            <div className={classes.resultsInfo}>\r\n                <div id=\"pollsReported\">{data.pollsReported}/{data.pollsTotal} polls reported</div>\r\n                <div id=\"totalVotes\">{data.votes.toLocaleString('en')} total votes</div>\r\n            </div>\r\n                <div>\r\n                    {props.data.results.map((candidate, i)=> {\r\n                        let partyColor = getPartyColor(candidate);\r\n                        return <Candidate prov={props.prov} screensize={props.screensize} key={i} color={partyColor} candidate={candidate}/>\r\n                    })}\r\n                </div>    \r\n            </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results","import React, {useState, useEffect, useRef} from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\nimport Results from './Results'\r\n\r\nconst styles = makeStyles({\r\n    sidebar: {\r\n        flex: 2, \r\n        minWidth: 260,\r\n        position: 'relative',\r\n        display: 'flex',\r\n        overflow: 'hidden'\r\n    },\r\n    title: {\r\n        width: '100%',\r\n        top: 0,\r\n        backgroundColor: 'darkgrey',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        minHeight: 50,\r\n        paddingLeft: 10,\r\n        fontWeight: 'bolder',\r\n    },\r\n    content: {\r\n        marginBottom: 10,\r\n        height: 'calc(100% - 50px)',\r\n        overflowX: 'hidden',\r\n        overflowY: 'scroll'\r\n\r\n    },\r\n    LocationButton: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        minHeight: 50,\r\n        paddingLeft: 10,\r\n        justifyContent: 'space-between',\r\n        '&:hover': {\r\n            backgroundColor: 'lightgrey',\r\n            cursor: 'pointer'\r\n        }\r\n    }\r\n})\r\n\r\nconst Sidebar = (props) =>  {\r\n    const [arrow, toggleArrow] = useState(0)\r\n    const classes=styles();\r\n    const [menu, setMenu] = useState('location')\r\n    const [results, setResults] = useState(null)\r\n    const nodeRef = useRef(null)\r\n\r\n\r\n    useEffect(()=>{\r\n        if (props.results) {\r\n            setResults(props.results)\r\n            setMenu('results')\r\n        } else {\r\n            setResults(null)\r\n            setMenu('location')\r\n            toggleArrow(0)\r\n        }\r\n    },[props.results, props.data])\r\n\r\n\r\n    const handleSelectRiding = (results) => {\r\n        props.handleSelectRiding(results);\r\n        setResults(results); \r\n        setMenu('results')\r\n    }   \r\n\r\n    const LocationButton = (props) => {\r\n        return (\r\n            <div\r\n                className={`${classes.LocationButton} menu-item`}\r\n                onMouseEnter={()=>toggleArrow(props.resultId)}\r\n                onMouseLeave={()=>toggleArrow(0)}\r\n                // onTouchStart={(e)=>{console.log('start',e);toggleArrow(props.resultId)}}\r\n                // onTouchCancel={(e)=>console.log('cancel', e)}\r\n                onTouchMove={e=>toggleArrow(props.resultId)}\r\n                onTouchEnd={e=>handleSelectRiding(props.resultData)}\r\n                onClick={()=>handleSelectRiding(props.resultData)}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const handleBack = () => {\r\n        setMenu('location')\r\n        props.handleSelectRiding(null)\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"widgetSidebar\" className={classes.sidebar}>\r\n            <div style={{position: 'absolute', top: 0, height: '50px', width: '100%', backgroundColor: 'darkgrey'}}/>\r\n            <CSSTransition \r\n                in={menu===\"location\"} \r\n                timeout={500}\r\n                unmountOnExit\r\n                nodeRef={nodeRef}\r\n                classNames=\"menu-primary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        SELECT A RIDING\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                    {\r\n                        props.data && props.data.data.sort((a,b)=>{\r\n                            if (a.name > b.name) {\r\n                                return 1\r\n                            } else return -1\r\n                        })\r\n                        .map((result)=> {\r\n                            return (\r\n                                <LocationButton key={result.id} resultId={result.id} resultData={result} >{result.name}{arrow === result.id && <ChevronRightIcon/>}</LocationButton>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                </div>\r\n            </CSSTransition>\r\n            <CSSTransition \r\n                in={menu===\"results\"} \r\n                unmountOnExit\r\n                timeout={500}\r\n                nodeRef={nodeRef}\r\n                classNames=\"menu-secondary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        <ChevronLeftIcon onClick={handleBack} style={{cursor: 'pointer'}}/><div style={{paddingRight: '15px'}}>{results && results.name.toUpperCase()}</div>\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                        {props.data && menu === 'results' && \r\n                            <Results \r\n                                prov={props.prov}\r\n                                screensize={props.small}\r\n                                data={results}\r\n                                parties={props.parties}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import React from 'react'\r\n\r\nconst LoadingAnimation = () => {\r\n    return (\r\n        <div className=\"spinnerDiv\">\r\n            <div className=\"spinnerText\">Loading Map..</div>\r\n            <div className=\"spinner\">\r\n                <div className=\"double-bounce1\"></div>\r\n                <div className=\"double-bounce2\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LoadingAnimation","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: props=>props.color,\r\n        color: 'white', \r\n        fontSize: 18,\r\n        fontWeight: 'bold',\r\n        padding: 5,\r\n        justifyContent: \"center\",\r\n        display: 'flex', \r\n        alignSelf: 'center',\r\n        width: '100%',\r\n        '& svg': {\r\n            paddingRight: 5\r\n        }\r\n    }\r\n})\r\n\r\nconst Declaration = (props) => {\r\n    const classes = useStyles(props)\r\n    return <div className={classes.root}>\r\n        <CheckCircleIcon />\r\n        {props.declarationText}\r\n    </div>\r\n}\r\n\r\nexport default Declaration\r\n\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {makeStyles} from '@material-ui/core'\nimport axios from 'axios'\n\n\n// import { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nimport MapDiv from './components/MapTest'\nimport Sidebar from './components/Sidebar.js'\nimport LoadingAnimation from './components/LoadingAnimation'\nimport Declaration from './components/Declaration'\n\nconst styles = makeStyles({\n  app: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n    \n  }, \n  left: {\n    flex: 4,\n    position: 'relative',\n    display: 'flex',\n    flexDirection: \"column\"\n  }\n})\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n  const [loading, toggleLoading] = useState(true)\n  const [parties, setParties] = useState(null)\n  const [selectedResults, setSelectedResults] = useState(null)\n  const [timer, setTimer] = useState(30000)\n  const [screensize, setScreenSize] = useState(window.innerWidth)\n  const [declarationText, setDeclarationText] = useState('')\n\tconst [declaration, setDeclaration] = useState(null)\n  const [declaredColor, setDeclaredColor] = useState('')\n  const [prov, setProv] = useState('')\n\n  const classes = styles();\n\n\n  function getQueryString(name) {\n    name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n        results = regex.exec(window.location.search);\n    return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n  }\n\n  useEffect(()=>{\n    let province = 'nb'\n\n    var url = getQueryString('prov')\n    if (url) {\n      province = url\n    }\n    setProv(province)\n\n    if (province) {\n      getData(province)\n      startTimer(province)\n    }\n    console.log(`Updating every ${timer/1000} seconds`)\n  },[])\n\n  useEffect(()=> {\n    getResultsFromURL()\n  }, [loading])\n\n  const startTimer = (province) => {\n      setInterval(()=>{\n          getData(province);\n      }, timer);\n    }\n\n  useEffect(()=> {\n    updateResults()\n  }, [data])\n\n  useEffect(()=>{\n\t\ttry {\n\t\t\tif (data && declaration) {\n\t\t\t\tif (declaration.overallResult.partyName && declaration.overallResult.resultText) {\n\t\t\t\t\tlet text = declaration.overallResult.partyName + ' ' + declaration.overallResult.resultText;\n          setDeclarationText(text)\n          let partyWinner = parties.find(party=>party.name === declaration.overallResult.partyName)\n          setDeclaredColor(partyWinner.color)     \n\t\t\t\t} else \n        setDeclarationText('')\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t\n\t\t}\n\n    },[data, parties, declaration])\n\n  const getData = (province) => {\n    console.log('fetching data')\n    axios.get(`/${province}/fullresults`)\n      .then(res=>{\n        if (res.status === 200) {\n          setData(res.data);\n          toggleLoading(false);\n        }\n      })\n      .catch(err=>console.log(\"Error fetching FULLELECTIONDATA, check your env variables and try again\", err))\n    \n    axios.get(`/${province}/overallresults`)\n      .then(res=>{\n        if (res.status === 200) {\n          setParties(res.data.partyResults)\n        }\n      })\n      .catch(err=>console.log(\"Error fetching OVERALLRESULTS, check your env variables and try again\"))\n    axios.get(`/${province}/declaration`)\n      .then(function (res) {\n        if (res.status === 200) {\n          setDeclaration(res.data)\n        } \n      })\n      .catch(err=>{\n        console.log(\"Error fetching results\")\n      })\n  }\n\n  const getResultsFromURL = () => {\n    try {\n      let hash = window.location.hash\n      if (hash) {\n        hash = decodeURI(hash.replace('#', ''))\n        let name = hash\n        if (data) {\n          const result = data.data.find(riding=>{\n            return riding.name.toLowerCase() === name.toLowerCase() \n          })\n          if (result) {\n            setSelectedResults(result)\n          }\n        }\n      }\n  \n    } catch (err) {\n      console.log('could not find riding by hash')\n    }\n\n  }\n\n  const updateResults = () => {\n    if (selectedResults) {\n      let initResults = selectedResults.name;\n      let newResults = data.data.find(riding=> riding.name === initResults)\n      if (initResults === newResults.name) {\n        setSelectedResults(newResults)\n      }\n    }\n  }\n\n  const handleSelectRiding = (results) => {\n    setSelectedResults(results)\n  }\n\n\n  return (\n    <div id={'map-widget-app'} className={classes.app}>\n      <div className={classes.left}>\n        {declarationText && <Declaration color={declaredColor} declarationText={declarationText}/>}\n      {!loading  ? <MapDiv \n        data={data}\n        parties={parties}\n        province={prov}\n        handleSelectRiding={handleSelectRiding}\n        selectedRiding={selectedResults}\n        />\n        :\n        <LoadingAnimation/>\n      }\n      </div>\n        <Sidebar \n          data={data} \n          parties={parties}\n          results={selectedResults} \n          handleSelectRiding={handleSelectRiding}\n          small={screensize}\n          prov={prov}\n          />\n        {/* {!loading && <Pictureloader data={data}/>} */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}